% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gstackwidget.R
\name{gstackwidget}
\alias{gstackwidget}
\title{stack widget is a "card" container. Use \code{gnotebook} methods to change cards}
\usage{
gstackwidget(container, ..., width = NULL, height = NULL, ext.args = NULL)
}
\arguments{
\item{container}{A parent container. In \pkg{gWidgetsWWW2} a
parent container is not optional (though it can be substituted
with the \code{parent} argument in some circumstances). The parent
specifies the widget heirarchy and the \code{...} argument is used
to pass along arguments to layout the child component in the
parent container. Typically, these are passed to the \code{add}
method of the parent container.}

\item{...}{Used to pass along argument to the parent container's
\code{add} method and possible other arguments to the underlying
ference class constructors.}

\item{width}{width in pixels of component. Sizing in
\pkg{gWidgetsWWW2} is sometimes necessary as the arguments
\code{expand} and \code{fill} are not well implemented.}

\item{height}{height in pixels of the component.}

\item{ext.args}{The contructors of \pkg{gWidgetsWWW2} ultimately
call an Ext constructor. The options passed to the Ext constructor
may be added to or overridden by use of this argument. Values are
passed in as named list components and with values converted into JavaScript
objects by \code{asJSObject}.}
}
\value{
a GStackWidget reference class object.
}
\description{
stack widget is a "card" container. Use \code{gnotebook} methods to change cards
}
\examples{
w <- gwindow()
sb <- gstatusbar("Powered by gWidgetsWWW and Rook", cont=w)
g <- gstackwidget(cont=w)
gbutton("page 1. Next", cont=g, handler=function(h,...) svalue(g) <- svalue(g) + 1)
gbutton("page 2. Next", cont=g, handler=function(h,...) svalue(g) <- svalue(g) + 1)
gbutton("remove me", cont=g, handler=function(h,...) dispose(g))
gbutton("page 3. First", cont=g, handler=function(h,...) svalue(g) <- 1)
svalue(g) <- 1
}

