% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gtable.R
\docType{data}
\name{gtable}
\alias{GTable}
\alias{gtable}
\title{A table widget}
\format{\preformatted{Class 'R6ClassGenerator' <environment: 0x23dadf0> 
 - attr(*, "name")= chr "GTable_generator"
}}
\usage{
gtable(items, multiple = FALSE, chosencol = 1, icon.FUN = NULL,
  filter.column = NULL, filter.labels = NULL, filter.FUN = NULL,
  handler = NULL, action = NULL, container = NULL, ..., width = NULL,
  height = NULL, ext.args = NULL, paging = FALSE, col.widths = rep(20,
  ncol(as.data.frame(items))))

GTable
}
\arguments{
\item{items}{data frame of items to display}

\item{multiple}{logical. TRUE for multiple selections}

\item{chosencol}{The svalue() method returns a single value, by default. This species column of that value.}

\item{icon.FUN}{NOT IMPLEMENTED. Instead, just add a column with class Icon containing css class of the icons}

\item{filter.column}{Ignored}

\item{filter.labels}{Ignored}

\item{filter.FUN}{Ignored.}

\item{handler}{single click handlers}

\item{action}{Passed to handler to parameterize a call}

\item{container}{A parent container. In \pkg{gWidgetsWWW2} a
parent container is not optional (though it can be substituted
with the \code{parent} argument in some circumstances). The parent
specifies the widget hierarchy and the \code{...} argument is used
to pass along arguments to layout the child component in the
parent container. Typically, these are passed to the \code{add}
method of the parent container.}

\item{...}{Used to pass along argument to the parent container's
\code{add} method and possible other arguments to the underlying
reference class constructors.}

\item{width}{width in pixels of component. Sizing in
\pkg{gWidgetsWWW2} is sometimes necessary as the arguments
\code{expand} and \code{fill} are not well implemented.}

\item{height}{height in pixels of the component.}

\item{ext.args}{additional configuration values to pass to constructor}

\item{paging}{Either a logical variable or integer. If \code{TRUE}
then paging will be used which allows only chunks of the data to
be sent to the browser at a time (default size = 200 rows). If
\code{integer} then paging is turned on and this value overrides
the default page size.}

\item{col.widths}{width of each column. Also see \code{size<-}
with a list where \code{columnWidths} is specified.}
}
\value{
An ExtWidget instance
}
\description{
A widget for displaying a data frame in tabular format. The main
property is the set of indices for the currently selected
rows. For large data sets, the data can be "paged", that is given
to the browser in bite-sized chunks so the lag is lacking.  The
change handler is for a single click, also used for selection. Use
\code{addHandlerDoubleclick} to specify a callback for the double
click event on a cell.

The table widget is implemented using a proxy. That is, the data
is loaded in a separate AJAX call. This makes things relatively
responsive, but if there is too much data one can turn on paging.
}
\details{
The column names are inherited from the
columnnames of the data frame.

A column of class "Icon" (see
\code{\link{asIcon}}) will render a css class as an icon. See the
example.

The item replacement operator \code{[<-} will work
only if all the column types remain constant, as the column
renderers are set at time of construction. This also effects the
initial data frame. Pass a 0-row data frame with column names and
defined column types at construction if no data is known at that
point.

The widget can filter through the visible method. This basically
passes back the filtered data from the server each time it is
called. To avoid the data transfer, one can use the \code{filter}
reference method, which filters browser side by a regular
expression.
}
\note{
With \code{width} and/or \code{height} set to \code{NULL},
the default size will likely be unsatisfying. (And can consume any
space in a box, so items packed in after will not be shown.) As
such, these values are often best set by the programmer. They can
be readjusted through the \code{size<-} method. The \code{size<-}
method can also be used to adjust the columns widths, by passing a
list with a component named \code{columnWidths} containing the
desired widths in pixels.

The \code{visible<-} method may be used for filtering.
}
\examples{
w <- gwindow("Filtering and table example")
sb <- gstatusbar("Powered by gWidgetsWWW and Rook", cont=w)
g <- ggroup(cont=w, horizontal=FALSE)
g1 <- ggroup(cont=g)
glabel("Filter by:", cont=g1)
e <- gedit("", cont=g1)
tbl <- gtable(data.frame(name=state.name, stringsAsFactors=FALSE), cont=g,  multiple=TRUE)
addHandlerKeystroke(e, handler=function(h,...) {
val <- svalue(h$obj)
if(nchar(val) > 0) {
tbl$filter("name", val)
}
})
b <- gbutton("click", cont=g, handler=function(h,...) galert(svalue(tbl, index=FALSE), parent=w))

## icons
m <- mtcars[1:3, 1:4]
## add icons as css class
m[,1] <- asIcon(c("up","up","down"))
 gtable(m, cont=g)
}
\keyword{datasets}

