% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ggroup.R
\name{ggroup}
\alias{ggroup}
\alias{gvbox}
\title{Group, or box, container}
\usage{
ggroup(horizontal = TRUE, spacing = 2, use.scrollwindow = FALSE,
  container, ..., width = NULL, height = NULL, ext.args = NULL)

gvbox(...)
}
\arguments{
\item{horizontal}{left or right (default), or top to bottom (\code{horizontal=FALSE})}

\item{spacing}{Margin around each child component in pixels. Can
be a single number, in which case it is equal pixel space around
each child. But for gWidgetsWWW2 one can specify a vector with
recycling like function(top, right=top, bottom=top, left=right). A
typical pattern is c(5,5,0,0), as otherwise there are 10 = 5 + 5 pixels
between adjoing children. To get padding just around interior of
box, pass in a value through ext.args, as in
\code{ext.args=list(bodyPadding=10)}.}

\item{use.scrollwindow}{logical. If given, scrollbars will appear}

\item{container}{A parent container. In \pkg{gWidgetsWWW2} a
parent container is not optional (though it can be substituted
with the \code{parent} argument in some circumstances). The parent
specifies the widget heirarchy and the \code{...} argument is used
to pass along arguments to layout the child component in the
parent container. Typically, these are passed to the \code{add}
method of the parent container.}

\item{...}{passed to \code{ggroup}}

\item{width}{width in pixels of component. Sizing in
\pkg{gWidgetsWWW2} is sometimes necessary as the arguments
\code{expand} and \code{fill} are not well implemented.}

\item{height}{height in pixels of the component.}

\item{ext.args}{The contructors of \pkg{gWidgetsWWW2} ultimately
call an Ext constructor. The options passed to the Ext constructor
may be added to or overridden by use of this argument. Values are
passed in as named list components and with values converted into JavaScript
objects by \code{asJSObject}.}
}
\value{
a \code{GGroup} reference class  object
}
\description{
Group, or box, container

Shortcut for vertical box containers.
}
\examples{
w <- gwindow()
sb <- gstatusbar("Powered by gWidgetsWWW and Rook", cont=w)
g <- ggroup(cont=w, horizontal=FALSE) ## top to bottom
for(i in 1:10) gbutton(i, cont=g)
## add/delete
ctr <- 1 ### for label
addRow <- function(g) {
g1 <- ggroup(cont=g)
gbutton("x", cont=g1, handler=function(h,...) {delete(g, g1)})
glabel(paste("Click x to delete", ctr), cont=g1)
ctr <<- ctr + 1
}
g1 <- gframe("add/delete", cont=g, horizontal=FALSE)
addRow(g1)
f <- gframe("Adding and deleting", cont=g, horizontal=FALSE)
gbutton("+", cont=f, handler=function(h,...) addRow(f))
}

