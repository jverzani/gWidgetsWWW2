% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gedit.R
\docType{class}
\name{gedit}
\alias{GEdit}
\alias{GEdit-class}
\alias{gedit}
\title{gedit widget}
\usage{
gedit(text = "", width = 25, coerce.with = NULL, initial.msg = "",
  handler = NULL, action = NULL, container = NULL, ..., ext.args = NULL,
  validate.type = NULL, validate.regexp = NULL)
}
\arguments{
\item{text}{initial text}

\item{width}{width in characters. Converted to pixels by multiplying by 8.}

\item{coerce.with}{Function to call for coercion from text. If no
coercion be careful when using the values, as the user can
potentialy type in malicious things.}

\item{initial.msg}{initial message to user, in greyed out text}

\item{handler}{optional means (to \code{\link{addHandlerChanged}})
to specify a handler for the default signal. A handler is a
function with signature \code{(h,...)} where \code{h} is a list
with components \code{obj} referring to the object emitting the
signal, \code{action} containing values passed to the
\code{action} argument, and possible other values.}

\item{action}{Passed to handler to parameterize a call}

\item{container}{A parent container. In \pkg{gWidgetsWWW2} a
parent container is not optional (though it can be substituted
with the \code{parent} argument in some circumstances). The parent
specifies the widget heirarchy and the \code{...} argument is used
to pass along arguments to layout the child component in the
parent container. Typically, these are passed to the \code{add}
method of the parent container.}

\item{...}{Used to pass along argument to the parent container's
\code{add} method and possible other arguments to the underlying
ference class constructors.}

\item{ext.args}{The contructors of \pkg{gWidgetsWWW2} ultimately
call an Ext constructor. The options passed to the Ext constructor
may be added to or overridden by use of this argument. Values are
passed in as named list components and with values converted into JavaScript
objects by \code{asJSObject}.}

\item{validate.type}{pre-defined validation type:
\code{c("alpha","alphanum","numeric",
"email","url","nonempty")}. When specified, value is verified to
match this type.}

\item{validate.regexp}{optional regular expression to validate
against. If the argument has a names argument, this is used to
notify the user why the type is invalid.}
}
\value{
a \code{GEdit} referece class object
}
\description{
gedit widget

For the \code{GEdit} class, the change signal is  "blur" or a
focus-out event. Use the reference class method
\code{add_handler_enter} for "enter" key press and
\code{add_handler_change} for a mix of change events (browser
dependent, but for most includes \code{['change', 'input',
'textInput', 'keyup', 'dragdrop']}.
}
\section{Methods}{

\describe{
\item{\code{add_handler_enter(handler, action = NULL, ...)}}{add handler key for enter event. No addHandlerEnter method, call this directly}

\item{\code{before_handler(signal, params)}}{Hook that can be called prior to observer call. Might be useful to set value without relying on transport call to arrive first. Return value -- a named list -- is passed to observers as components of h }

\item{\code{process_transport(value, ...)}}{R Function to process the transport. Typically just sets 'value', but may do more. In the above example, where var param = {value: this.getText()} was from transport_fun we would get the text for value}
}}
\note{
The 'change' event varies from browser to browser. To catch
just an enter key, the \code{add_handler_enter} reference class method
is available.  There is no [<- method to add typeahead
(autocomplete) values. This feature can be done with a combobox though.
}
\examples{
w <- gwindow()
sb <- gstatusbar("Powered by gWidgetsWWW2 and Rook", cont=w)
g <- ggroup(cont=w, horizontal=FALSE)
e <- gedit("initial text", cont=g)
addHandlerChanged(e, handler=function(h,...) {
galert(paste("You entered", svalue(h$obj)), parent=w)
})
## initial message
e1 <- gedit(initial.msg="type a value here ...", cont=g)
## validation
e2 <- gedit(cont=g, validate.regexp=setNames("^[a-z]*$", "Lower case only"))
}

